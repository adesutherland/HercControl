name: Build HercControl

on: [push]

jobs:

#**************************************************#
  build-ubuntu:
    name: Build for Ubuntu
    runs-on: [ubuntu-latest]

    services:
      vm370:
        image: adriansutherland/vm370:latest
        ports:
          - 8038:8038

    steps:

    - name: Checkout HercControl
      uses: actions/checkout@v2

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Run CMAKE
      uses: lukka/run-cmake@v3
      with:
        # Select the build configuration, typically Debug or Release.
        cmakeBuildType: MinSizeRel # optional, default is Debug
        buildDirectory: "${{ runner.temp }}/build"

    - name: Get Executable
      run: |
        mkdir -p "${{ runner.temp }}/exe"
        cp "${{ runner.temp }}/build/herccontrol" "${{ runner.temp }}/exe"
        cp LICENSE "${{ runner.temp }}/exe"
        cp README.md "${{ runner.temp }}/exe"
        ls "${{ runner.temp }}/exe"
      shell: bash

    - name: Sanity Check
      working-directory: ${{ runner.temp }}/exe
      run: | 
        ./herccontrol -v
      shell: bash

    - name: Copy Basic Test
      run: |
        cp ./test/basictest.sh "${{ runner.temp }}/basictest.sh"
        chmod +x "${{ runner.temp }}/basictest.sh"
      shell: bash

    - name: Basic Test
      working-directory: ${{ runner.temp }}/exe
      run: |
        ../basictest.sh
      shell: bash

    - name: Upload Executable
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v1
      with:
        name: HercControl-Ubuntu
        path: "${{ runner.temp }}/exe"

#**************************************************#
  build-windows:
    name: Build for Windows
    runs-on: [windows-latest]

    steps:

    - name: Checkout HercControl
      uses: actions/checkout@v2

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Run CMAKE
      uses: lukka/run-cmake@v3
      with:
        # Select the build configuration, typically Debug or Release.
        cmakeBuildType: MinSizeRel # optional, default is Debug
        buildDirectory: "${{ runner.temp }}/build"

    - name: Get Executable
      run: |
        mkdir -p "${{ runner.temp }}/exe"
        cp "${{ runner.temp }}/build/herccontrol.exe" "${{ runner.temp }}/exe"
        cp LICENSE "${{ runner.temp }}/exe"
        cp README.md "${{ runner.temp }}/exe"
        ls "${{ runner.temp }}/exe"
      shell: bash

    - name: Sanity Check
      working-directory: ${{ runner.temp }}/exe
      run: | 
        ./herccontrol -v
      shell: bash

    - name: Upload Executable
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v1
      with:
        name: HercControl-Windows
        path: "${{ runner.temp }}/exe"

#**************************************************#
  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release
    needs: [build-ubuntu, build-windows] 
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v1

      - name: Get ubuntu binary 
        uses: actions/download-artifact@v1
        with:
          name: HercControl-Ubuntu

      - name: ZIP ubuntu binary 
        run: 
          zip -r HercControl-Ubuntu.zip HercControl-Ubuntu

      - name: Get windows binary 
        uses: actions/download-artifact@v1
        with:
          name: HercControl-Windows

      - name: ZIP windows binary 
        run: 
          zip -r HercControl-Windows.zip HercControl-Windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Asset - Ubuntu
        id: upload-release-asset-ubuntu 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./HercControl-Ubuntu.zip
          asset_name: HercControl-Ubuntu.zip
          asset_content_type: application/zip

      - name: Upload Release Asset - Windows
        id: upload-release-asset-windows 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./HercControl-Windows.zip
          asset_name: HercControl-Windows.zip
          asset_content_type: application/zip
